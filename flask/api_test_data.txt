# Flask API Test Data and Examples
# Use these examples to test the API endpoints

# ===== BASIC ENDPOINTS =====

# 1. Hello World
GET /
Expected Response:
'Hello World!'

# 2. Exception Generation
GET /exception
Expected Response:
'Exception Generated!'
Note: This endpoint intentionally generates exceptions for testing error handling

# ===== USER ENDPOINTS =====

# 1. User Profile
GET /user/user1
Expected Response:
{
    "message": "Profile for user1",
    "data": {
        "name": "John Doe",
        "score": 85,
        "attempts": 3,
        "tags": ["python", "flask"]
    }
}

# 2. Process User Data
POST /process
Request Body:
{
    "id": "user4",
    "name": "Alice Brown",
    "attempts": 2,
    "tags": ["python", "django"]
}
Expected Response:
{
    "status": "success",
    "result": {
        "name": "ALICE BROWN",
        "score": 50.0,
        "tags": "python,django,"
    }
}

# 3. User Stats
GET /user/stats/user1
Expected Response:
{
    "user_info": {
        "name": "John Doe",
        "score": 85,
        "attempts": 3,
        "tags": ["python", "flask"]
    },
    "order_count": 2,
    "total_spent": 2599.96,
    "average_order_value": 1299.98
}

# ===== PRODUCT ENDPOINTS =====

# 1. Get Products
GET /products
Expected Response:
{
    "products": [
        {"id": 1, "name": "Laptop", "price": 999.99, "stock": 10},
        {"id": 2, "name": "Smartphone", "price": 499.99, "stock": 15},
        {"id": 3, "name": "Headphones", "price": 99.99, "stock": 20}
    ]
}

# 2. Get Products with Filters
GET /products?min_price=500&max_price=1000
Expected Response:
{
    "products": [
        {"id": 1, "name": "Laptop", "price": 999.99, "stock": 10}
    ]
}

# 3. Update Inventory
POST /inventory/update
Request Body:
{
    "product_id": 1,
    "quantity": 2
}
Expected Response:
{
    "status": "success",
    "new_stock": 8
}

# ===== ORDER ENDPOINTS =====

# 1. Get User Orders
GET /orders/user1
Expected Response:
{
    "orders": [
        {
            "order_id": "ORD001",
            "user_id": "user1",
            "products": [1, 2],
            "total": 1499.98
        },
        {
            "order_id": "ORD003",
            "user_id": "user1",
            "products": [1, 3],
            "total": 1099.98
        }
    ],
    "total_spent": 2599.96,
    "order_count": 2
}

# ===== SEARCH ENDPOINT =====

# 1. Search
GET /search?q=python
Expected Response:
{
    "results": [
        "python",
        "python",
        "python",
        "python",
        "python",
        "python",
        "python",
        "python",
        "python",
        "python"
    ]
}

# ===== FILE ENDPOINT =====

# 1. Get File
GET /file/example.txt
Expected Response:
Content of the file if it exists, or error message if not found

# ===== KNOWN BUGS TO TEST =====

1. User Profile Endpoint:
   - SQL Injection vulnerability in username query
   - No input validation for username
   - Potential memory leak with datetime storage

2. Process User Data Endpoint:
   - Division by zero if attempts is 0
   - No validation for required fields
   - File writing without proper error handling

3. Search Endpoint:
   - Infinite loop in results generation
   - No limit on query length
   - No sanitization of search query

4. Products Endpoint:
   - Type conversion issues with price filters
   - No validation for negative prices
   - Potential float precision issues

5. Inventory Update Endpoint:
   - Negative stock allowed
   - No validation for quantity
   - Race condition in stock update

6. User Stats Endpoint:
   - Division by zero if no orders
   - No error handling for missing user
   - Potential memory issues with large datasets

# ===== TESTING INSTRUCTIONS =====

1. Start the Flask server:
   python app.py

2. The server will run on:
   http://localhost:8010

3. Use the examples above to test each endpoint

4. Try to identify and fix the bugs in each endpoint

5. Test edge cases and error conditions:
   - Invalid input data
   - Missing required fields
   - Boundary conditions
   - Error handling
   - Performance issues

6. Verify the fixes work as expected

# ===== SAMPLE DATA =====

Initial User Data:
{
    "user1": {"name": "John Doe", "score": 85, "attempts": 3, "tags": ["python", "flask"]},
    "user2": {"name": "Jane Smith", "score": 92, "attempts": 2, "tags": ["java", "spring"]},
    "user3": {"name": "Bob Johnson", "score": 78, "attempts": 4, "tags": ["javascript", "react"]}
}

Initial Products:
[
    {"id": 1, "name": "Laptop", "price": 999.99, "stock": 10},
    {"id": 2, "name": "Smartphone", "price": 499.99, "stock": 15},
    {"id": 3, "name": "Headphones", "price": 99.99, "stock": 20}
]

Initial Orders:
[
    {"order_id": "ORD001", "user_id": "user1", "products": [1, 2], "total": 1499.98},
    {"order_id": "ORD002", "user_id": "user2", "products": [3], "total": 99.99},
    {"order_id": "ORD003", "user_id": "user1", "products": [1, 3], "total": 1099.98}
] 